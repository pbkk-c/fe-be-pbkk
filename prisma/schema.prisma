generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  name          String?
  created_at    DateTime        @default(now())
  
  loginHistory  LoginHistory[]
  contents      Content[]
  logs          Log[]
}

model LoginHistory {
  id          String   @id @default(uuid())
  user_id     String?
  login_time  DateTime @default(now())
  ip_address  String?
  user_agent  String?

  user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Creator {
  id          String     @id @default(uuid())
  platform    String
  name        String
  handle      String?
  profile_url String?
  avatar_url  String?
  created_at  DateTime   @default(now())

  contents    Content[]
}

model Content {
  id            String       @id @default(uuid())
  user_id       String?
  creator_id    String?
  platform      String
  url           String       @unique
  title         String?
  raw_text      String?
  published_at  DateTime?
  collected_at  DateTime     @default(now())
  
  user          User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)
  creator       Creator?     @relation(fields: [creator_id], references: [id], onDelete: SetNull)
  media         ContentMedia[]
  analyses      Analysis[]
  topics        ContentTopic[]
}

model ContentMedia {
  id          String    @id @default(uuid())
  content_id  String
  type        String?
  url         String?
  created_at  DateTime  @default(now())

  content     Content   @relation(fields: [content_id], references: [id], onDelete: Cascade)
}

model Analysis {
  id                  String            @id @default(uuid())
  content_id          String
  main_theme          String?
  summary             String?
  fact_percentage     Float?
  opinion_percentage  Float?
  hoax_percentage     Float?
  sentiment           String?
  created_at          DateTime          @default(now())

  content             Content           @relation(fields: [content_id], references: [id], onDelete: Cascade)
  details             AnalysisDetail[]
}

model AnalysisDetail {
  id             String    @id @default(uuid())
  analysis_id    String
  sentence       String?
  classification String?   // fact / opinion / hoax
  confidence     Float?
  
  analysis       Analysis  @relation(fields: [analysis_id], references: [id], onDelete: Cascade)
}

model Topic {
  id           String          @id @default(uuid())
  name         String          @unique
  description  String?
  created_at   DateTime        @default(now())
  
  contents     ContentTopic[]
}

model ContentTopic {
  content_id String
  topic_id   String
  
  content    Content @relation(fields: [content_id], references: [id], onDelete: Cascade)
  topic      Topic   @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  @@id([content_id, topic_id])
}

model Log {
  id          BigInt    @id @default(autoincrement())
  user_id     String?
  action      String?
  details     Json?
  created_at  DateTime  @default(now())
  
  user        User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
}