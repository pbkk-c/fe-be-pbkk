generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model analyses {
  id                 String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content_id         String?            @db.Uuid
  main_theme         String?
  summary            String?
  fact_percentage    Decimal?           @db.Decimal
  opinion_percentage Decimal?           @db.Decimal
  hoax_percentage    Decimal?           @db.Decimal
  sentiment          String?
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  contents           contents?          @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  analysis_details   analysis_details[]
}

model analysis_details {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  analysis_id    String?   @db.Uuid
  sentence       String?
  classification String?
  confidence     Decimal?  @db.Decimal
  analyses       analyses? @relation(fields: [analysis_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model content_media {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content_id String?   @db.Uuid
  type       String?
  url        String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  text       String?
  contents   contents? @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model contents {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?         @db.Uuid
  platform      String?
  url           String?         @unique
  title         String?
  raw_text      String?
  published_at  DateTime?       @db.Timestamp(6)
  collected_at  DateTime?       @default(now()) @db.Timestamp(6)
  creator_name  String?
  topic         String?
  type          String?
  analyses      analyses[]
  content_media content_media[]
  users         users?          @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model login_history {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  login_time DateTime? @default(now()) @db.Timestamp(6)
  ip_address String?
  user_agent String?
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model logs {
  id         BigInt    @id @default(autoincrement())
  user_id    String?   @db.Uuid
  action     String?
  details    Json?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model users {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String          @unique
  password      String
  name          String?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  contents      contents[]
  login_history login_history[]
  logs          logs[]
}

model gardio_links {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url        String
  created_at DateTime? @default(now()) @db.Timestamp(6)
}